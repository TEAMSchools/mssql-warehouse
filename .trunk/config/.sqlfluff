[sqlfluff]
# Supported dialects https://docs.sqlfluff.com/en/stable/dialects.html
# Or run 'sqlfluff dialects'
dialect = tsql
# verbose is an integer (0-2) indicating the level of log output
; verbose = 0
# Turn off color formatting of output
; nocolor = False
# One of [raw|jinja|python|placeholder]
; templater = jinja
# Comma separated list of rules to check, default to all
; rules = all
# Comma separated list of rules to exclude, or None
; exclude_rules = None
# The depth to recursively parse to (0 for unlimited)
; recurse = 0
# Below controls SQLFluff output, see max_line_length for SQL output
; output_line_length = 80
# Number of passes to run before admitting defeat
; runaway_limit = 10
# Ignore errors by category (one or more of the following, separated by commas: lexing,linting,parsing,templating)
; ignore = None
# Warn only for rule codes (one of more rule codes, seperated by commas: e.g. L001,L002)
# Also works for templating and parsing errors by using TMP or PRS
; warnings = None
# Ignore linting errors found within sections of code coming directly from
# templated code (e.g. from within Jinja curly braces. Note that it does not
# ignore errors from literal code found within template loops.
; ignore_templated_areas = True
# can either be autodetect or a valid encoding e.g. utf-8, utf-8-sig
; encoding = autodetect
# Ignore inline overrides (e.g. to test if still required)
; disable_noqa = False
# Comma separated list of file extensions to lint
# NB: This config will only apply in the root folder
; sql_file_exts = .sql,.sql.j2,.dml,.ddl
# Allow fix to run on files, even if they contain parsing errors
# Note altering this is NOT RECOMMENDED as can corrupt SQL
; fix_even_unparsable = False
# Very large files can make the parser effectively hang.
# The more efficient check is the _byte_ limit check which
# is enabled by default. The previous _character_ limit check
# is still present for backward compatibility. This will be
# removed in a future version.
# Set either to 0 to disable.
; large_file_skip_char_limit = 0
; large_file_skip_byte_limit = 20000
# CPU processes to use while linting.
# If positive, just implies number of processes.
# If negative or zero, implies number_of_cpus - specified_number.
# e.g. -1 means use all processors but one. 0  means all cpus.
; processes = 1

; [sqlfluff:indentation]
# See https://docs.sqlfluff.com/en/stable/layout.html#configuring-indent-locations
; indented_joins = False
; indented_ctes = False
; indented_using_on = True
; indented_on_contents = True
; template_blocks_indent = True

# Layout configuration
# See https://docs.sqlfluff.com/en/stable/layout.html#configuring-layout-and-spacing
; [sqlfluff:layout:type:comma]
; spacing_before = touch
; line_position = trailing

; [sqlfluff:layout:type:binary_operator]
; line_position = leading

; [sqlfluff:layout:type:statement_terminator]
; spacing_before = touch
; line_position = trailing

; [sqlfluff:layout:type:end_of_file]
; spacing_before = touch

; [sqlfluff:layout:type:set_operator]
; line_position = alone:strict

; [sqlfluff:layout:type:start_bracket]
; spacing_after = touch

; [sqlfluff:layout:type:end_bracket]
; spacing_before = touch

; [sqlfluff:layout:type:start_square_bracket]
; spacing_after = touch

; [sqlfluff:layout:type:end_square_bracket]
; spacing_before = touch

; [sqlfluff:layout:type:casting_operator]
; spacing_before = touch
; spacing_after = touch

; [sqlfluff:layout:type:comparison_operator]
; spacing_within = touch
; line_position = leading

; [sqlfluff:layout:type:object_reference]
; spacing_within = inline

; [sqlfluff:layout:type:comment]
; spacing_before = any
; spacing_after = any

# Template loop tokens shouldn't dictate spacing around them.
; [sqlfluff:layout:type:template_loop]
; spacing_before = any
; spacing_after = any

; [sqlfluff:templater]
; unwrap_wrapped_queries = True

; [sqlfluff:templater:jinja]
; apply_dbt_builtins = True

# Some rules can be configured directly from the config common to other rules
; [sqlfluff:rules]
; tab_space_size = 4
# Max line length is set by default to be in line with the dbt style guide.
# https://github.com/dbt-labs/corp/blob/main/dbt_style_guide.md
; max_line_length = 80
; indent_unit = space
; allow_scalar = True
; single_table_references = consistent
; unquoted_identifiers_policy = all

# Some rules have their own specific config
; [sqlfluff:rules:L003]
; hanging_indents = True

; [sqlfluff:rules:L010]
# Keywords
; capitalisation_policy = consistent
# Comma separated list of words to ignore for this rule
; ignore_words = None
; ignore_words_regex = None

; [sqlfluff:rules:L011]
# Aliasing preference for tables
; aliasing = explicit

; [sqlfluff:rules:L012]
# Aliasing preference for columns
; aliasing = explicit

; [sqlfluff:rules:L014]
# Unquoted identifiers
; extended_capitalisation_policy = consistent
# Comma separated list of words to ignore for this rule
; ignore_words = None
; ignore_words_regex = None

; [sqlfluff:rules:L016]
# Line length
; ignore_comment_lines = False
; ignore_comment_clauses = False

; [sqlfluff:rules:L027]
# Comma separated list of words to ignore for this rule
; ignore_words = None
; ignore_words_regex = None

; [sqlfluff:rules:L026]
# References must be in FROM clause
# Disabled for some dialects (e.g. bigquery)
; force_enable = False

; [sqlfluff:rules:L028]
# References must be consistently used
# Disabled for some dialects (e.g. bigquery)
; force_enable = False

; [sqlfluff:rules:L029]
# Keywords should not be used as identifiers.
; unquoted_identifiers_policy = aliases
; quoted_identifiers_policy = none
# Comma separated list of words to ignore for this rule
; ignore_words = None
; ignore_words_regex = None

; [sqlfluff:rules:L030]
# Function names
; extended_capitalisation_policy = consistent
# Comma separated list of words to ignore for this rule
; ignore_words = None
; ignore_words_regex = None

; [sqlfluff:rules:L031]
# Avoid table aliases in from clauses and join conditions.
# Disabled for some dialects (e.g. bigquery)
; force_enable = False

; [sqlfluff:rules:L036]
; wildcard_policy = single

; [sqlfluff:rules:L038]
# Trailing commas
; select_clause_trailing_comma = forbid

; [sqlfluff:rules:L040]
# Null & Boolean Literals
; capitalisation_policy = consistent
# Comma separated list of words to ignore for this rule
; ignore_words = None
; ignore_words_regex = None

; [sqlfluff:rules:L042]
# By default, allow subqueries in from clauses, but not join clauses
; forbid_subquery_in = join

; [sqlfluff:rules:L047]
# Consistent syntax to count all rows
; prefer_count_1 = False
; prefer_count_0 = False

; [sqlfluff:rules:L051]
# Fully qualify JOIN clause
; fully_qualify_join_types = inner

; [sqlfluff:rules:L052]
# Semi-colon formatting approach
; multiline_newline = False
; require_final_semicolon = False

; [sqlfluff:rules:L054]
# GROUP BY/ORDER BY column references
; group_by_and_order_by_style = consistent

; [sqlfluff:rules:L057]
# Special characters in identifiers
; unquoted_identifiers_policy = all
; quoted_identifiers_policy = all
; allow_space_in_identifier = False
; additional_allowed_characters = None
; ignore_words = None
; ignore_words_regex = None

; [sqlfluff:rules:L059]
# Policy on quoted and unquoted identifiers
; prefer_quoted_identifiers = False
; ignore_words = None
; ignore_words_regex = None
; force_enable = False

; [sqlfluff:rules:L062]
# Comma separated list of blocked words that should not be used
; blocked_words = None
; blocked_regex = None

; [sqlfluff:rules:L063]
# Data Types
; extended_capitalisation_policy = consistent
# Comma separated list of words to ignore for this rule
; ignore_words = None
; ignore_words_regex = None

; [sqlfluff:rules:L064]
# Consistent usage of preferred quotes for quoted literals
; preferred_quoted_literal_style = consistent
# Disabled for dialects that do not support single and double quotes for quoted literals (e.g. Postgres)
; force_enable = False

; [sqlfluff:rules:L066]
; min_alias_length = None
; max_alias_length = None
